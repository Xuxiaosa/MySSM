package mybatis.executer.statement;

import mybatis.annotation.MyParam;
import mybatis.config.Configuration;
import mybatis.config.MyDataSource;

import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class MyJDBCStatement {
    private static Connection conn;
    private static String driverClassName;
    private static String URL;
    private static String name;
    private static String password;
    private static boolean autoCommit;

//    static{
//        config();
//    }
//初始化配置
    public MyJDBCStatement(Configuration configuration) {

        MyDataSource myDataSource = configuration.getMyDataSource();

        driverClassName = myDataSource.getDriver();

        URL = myDataSource.getUrl();

        name = myDataSource.getUserName();

        password = myDataSource.getPassword();

        autoCommit = false;

        load();

        connect();
    }

    private static void config() {
        driverClassName = "com.mysql.jdbc.Driver";

        URL = "jdbc:mysql://localhost:3306/test";

        name = "root";

        password = "123456";

        autoCommit = false;
    }
//加载驱动
    private static void load() {
        try {
            Class.forName(driverClassName);
        } catch (ClassNotFoundException e) {
            System.out.println("驱动加载失败");
            e.printStackTrace();
        }
    }
//建立连接
    private static Connection connect() {
        load();
        try {
            conn = DriverManager.getConnection(URL, name, password);
            return conn;
        } catch (SQLException e) {
            System.out.println("连接建立失败");
            e.printStackTrace();
        }
        return null;
    }
//生成statement
    public static PreparedStatement prepare(String sql, boolean autoGeneratedKey) {
        PreparedStatement preparedStatement = null;
        connect();
//是否自动提交
        if (autoCommit) {

        } else {
            try {
                preparedStatement = conn.prepareStatement(sql);
            } catch (SQLException e) {
                System.out.println("创建prepareStatement 失败");
                e.printStackTrace();
            }
        }
        return preparedStatement;
    }
//查询
    public ResultSet doQuery(String sql, List<Object> params) {
        ResultSet result = null;
        if (params != null || !params.isEmpty()) {
//            有参数传入
            PreparedStatement preparedStatement = prepare(sql, false);
            for (int i = 0; i < params.size(); i++) {
                try {
                    preparedStatement.setObject(i + 1, params.get(i));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                try {
                    result = preparedStatement.executeQuery();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } else {
//todo 没有参数传入
        }
        return result;
    }
//获取方法的参数（实参）
    public HashMap<String, Object> getMethodParam(Method method, Object[] args) {
        HashMap<String, Object> paramMap = new HashMap<>();
        Parameter[] parameters = method.getParameters();
        for (int i = 0; i < parameters.length; i++) {
            MyParam myParam = parameters[i].getAnnotation(MyParam.class);
            if (myParam == null) {
                continue;
            }

            String paramName = myParam.value();
            Object paramValue = args[i];
            paramMap.put(paramName, paramValue);
        }
        return paramMap;

    }
//查询时获取形参
    public static List<String> getSelectParam(String sql) {
        int startIndex = sql.indexOf("where") + 5;
        String whereCause = sql.substring(startIndex);
        String[] paramStrs = whereCause.split("and");
        List<String> paramList = new ArrayList<>();
        for (String paramStr : paramStrs) {
            String sp = paramStr.split("=")[1];
            String param = sp.replace("#{", "").replace("}", "");
            param = param.trim();
            paramList.add(param);
        }
        return paramList;
    }
//将sql语句处理成可以被preparedStatement预处理的形式
    public static String replaceParam(String sql, List<String> selectParam) {
        for (int i = 0; i < selectParam.size(); i++) {
            String string = selectParam.get(i).trim();
            sql = sql.replace("#{" + string + "}", "?");
        }
        return sql;
    }
}
